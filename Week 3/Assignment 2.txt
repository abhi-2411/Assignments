Assignment 2


### Scikit-Learn: Basic Concepts and Functionalities

Scikit-Learn is a powerful Python library for machine learning, providing simple and efficient tools for data mining and data analysis. The library is built on Numpy, SciPy, and matplotlib, and is open-source. Here are the basic concepts and functionalities covered in the Scikit-Learn tutorial for beginners:

#### Basic Concepts
- **Datasets:** Scikit-Learn includes various datasets for practice, such as iris and digits. These datasets are accessible through functions like `load_iris()` and `load_digits()`.
- **Data Preparation:** Functions for splitting datasets into training and testing sets (`train_test_split`), standardizing features (`StandardScaler`), and handling missing values.
- **Estimators:** Objects that implement the `fit` method to learn from data and the `predict` method to make predictions. Examples include linear regression (`LinearRegression`), support vector machines (`SVC`), and k-nearest neighbors (`KNeighborsClassifier`).
- **Model Evaluation:** Tools for evaluating model performance, such as cross-validation (`cross_val_score`), confusion matrices (`confusion_matrix`), and various metrics like accuracy, precision, and recall.
- **Pipeline:** Allows chaining multiple processing steps together, enabling a streamlined workflow. Pipelines help in preprocessing data and applying models in a single step.

#### Code Example
Here's an example demonstrating basic Scikit-Learn functionality:

```python
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load dataset
iris = load_iris()
X, y = iris.data, iris.target

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train a logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')  # Output: Accuracy: 0.98
```

### Matplotlib vs. Seaborn for Data Visualization

#### Matplotlib

Matplotlib is a versatile library for creating static, animated, and interactive visualizations in Python. It provides comprehensive control over plot appearance and customization.

**Strengths:**
- Extensive Customization: Almost every aspect of a plot can be customized.
- Wide Range of Plot Types: Supports a variety of plots, including line plots, scatter plots, bar charts, histograms, and more.
- Integration: Integrates well with other Python libraries, such as Pandas, Numpy, and Scikit-Learn.
- Detailed Documentation: Comprehensive documentation and a large number of examples available.

**Weaknesses:**
- Verbose Syntax: Creating plots often requires more lines of code and can be complex for beginners.
- Aesthetic Limitations: Default plot styles are less visually appealing compared to Seaborn.

**When to Use:**
Matplotlib is ideal for creating highly customized and publication-quality plots. It's also useful when you need a wide range of plot types and fine-grained control over every aspect of the plot.

#### Seaborn

Seaborn is built on top of Matplotlib and provides a high-level interface for drawing attractive statistical graphics. It is designed to work well with Pandas data structures and simplifies the process of creating informative and visually appealing plots.

**Strengths:**
- Aesthetic Appeal: Default styles are more visually appealing and professional-looking.
- Simplified Syntax: Easier to create complex plots with fewer lines of code.
- Built-in Statistical Plotting: Includes advanced statistical plots like box plots, violin plots, and pair plots.
- Integration with Pandas: Works seamlessly with Pandas DataFrames, making it easier to visualize data directly from DataFrames.

**Weaknesses:**
- Limited Customization: While Seaborn simplifies plot creation, it offers less control over plot customization compared to Matplotlib.
- Dependency on Matplotlib: For highly customized plots, users often need to use Matplotlib functions alongside Seaborn.

**When to Use:**
Seaborn is ideal for quickly creating visually appealing statistical plots and for exploratory data analysis. It is particularly useful when working with Pandas DataFrames and when you need to create complex plots with minimal code.

#### Code Example
Here's an example comparing Matplotlib and Seaborn:

```python
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Create sample data
data = {
    'A': [1, 2, 3, 4, 5],
    'B': [5, 4, 3, 2, 1],
    'C': [2, 3, 4, 5, 6]
}
df = pd.DataFrame(data)

# Matplotlib example
plt.figure(figsize=(8, 4))
plt.plot(df['A'], df['B'], label='A vs B', color='blue', marker='o')
plt.xlabel('A')
plt.ylabel('B')
plt.title('Matplotlib Plot')
plt.legend()
plt.show()

# Seaborn example
plt.figure(figsize=(8, 4))
sns.lineplot(data=df, x='A', y='B', label='A vs B', marker='o')
plt.xlabel('A')
plt.ylabel('B')
plt.title('Seaborn Plot')
plt.legend()
plt.show()
```

This comparison illustrates how both Matplotlib and Seaborn can be used for data visualization, highlighting their respective strengths and use cases.