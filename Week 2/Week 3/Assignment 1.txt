Assignment 1

### Numpy: Essential Concepts and Features from the Beginner's Guide

Numpy (Numerical Python) is a fundamental package for scientific computing in Python. The official documentation covers several essential concepts and features for beginners.

#### Numpy Arrays
Numpy introduces `ndarray`, a powerful N-dimensional array object that forms the core of Numpy. Unlike Python lists, Numpy arrays are homogeneous, meaning they contain elements of the same data type, leading to more efficient storage and computation.

#### Array Creation
Arrays can be created in several ways, such as from Python lists or tuples using the `array()` function, or through functions like `zeros()`, `ones()`, `empty()`, and `arange()`, which create arrays of specific shapes and values.

#### Basic Operations
Numpy arrays support element-wise operations, enabling efficient arithmetic and mathematical computations. This includes operations like addition, subtraction, multiplication, and division. Universal functions (ufuncs) provide efficient element-wise functions such as `np.add()`, `np.subtract()`, and `np.multiply()`.

#### Indexing and Slicing
Numpy arrays can be indexed and sliced similarly to Python lists, but with more powerful capabilities. Multi-dimensional arrays can be accessed using a tuple of indices.

#### Shape Manipulation
Numpy provides functions to manipulate the shape and size of arrays, such as `reshape()`, `flatten()`, and `transpose()`. These functions allow for changing the structure of an array without altering its data.

#### Broadcasting
Broadcasting is a mechanism that allows Numpy to perform operations on arrays of different shapes. Smaller arrays are "broadcast" to match the shape of larger arrays, enabling efficient computation.

#### Statistical Functions
Numpy includes a range of statistical functions, such as `mean()`, `median()`, `std()`, and `sum()`, which operate on arrays to compute statistical properties.

#### Code Example
Here’s an example demonstrating some basic Numpy functionalities:

```python
import numpy as np

# Creating arrays
a = np.array([1, 2, 3])
b = np.array([[1, 2, 3], [4, 5, 6]])

# Basic operations
print(a + 5)          # Output: [ 6  7  8]
print(a * 2)          # Output: [ 2  4  6]

# Indexing and slicing
print(b[1, 2])        # Output: 6
print(b[:, 1])        # Output: [2 5]

# Shape manipulation
c = b.reshape((3, 2))
print(c)              # Output: [[1 2]
                      #          [3 4]
                      #          [5 6]]
```

### Pandas: Key Aspects for Beginners

Pandas is a powerful data manipulation and analysis library for Python. The official documentation covers several key aspects for beginners.

#### Data Structures
Pandas introduces two primary data structures: `Series` and `DataFrame`. A `Series` is a one-dimensional labeled array capable of holding any data type, while a `DataFrame` is a two-dimensional labeled data structure, similar to a spreadsheet or SQL table.

#### Creating Data Structures
Data structures in Pandas can be created from various inputs such as lists, dictionaries, Numpy arrays, and even other Pandas objects.

#### Data Indexing and Selection
Pandas provides robust indexing and selection capabilities. The `.loc` and `.iloc` indexers allow for label-based and integer-based indexing, respectively. Boolean indexing enables selecting data based on specific conditions.

#### Data Manipulation
Pandas excels at data manipulation tasks such as merging, joining, and concatenating datasets. Functions like `merge()`, `join()`, and `concat()` facilitate these operations. Additionally, Pandas provides functions for reshaping data, such as `pivot()`, `melt()`, and `stack()`.

#### Handling Missing Data
Pandas offers extensive tools for handling missing data. The `isnull()` and `notnull()` functions detect missing values, while `fillna()` and `dropna()` handle them by filling or removing.

#### Statistical Functions
Pandas includes a variety of statistical functions such as `mean()`, `median()`, `sum()`, and `describe()`, which provide summary statistics of the data.

#### Code Example
Here’s an example demonstrating basic Pandas functionalities:

```python
import pandas as pd

# Creating a DataFrame
data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [25, 30, 35],
    'City': ['New York', 'Los Angeles', 'Chicago']
}
df = pd.DataFrame(data)

# Data indexing and selection
print(df.loc[0])                 # Output: Name       Alice
                                 #          Age           25
                                 #          City    New York

print(df['Age'])                 # Output: 0    25
                                 #          1    30
                                 #          2    35

# Data manipulation
df['Age'] += 1
print(df)                        # Output:       Name  Age         City
                                 #          0  Alice   26     New York
                                 #          1    Bob   31  Los Angeles
                                 #          2 Charlie   36      Chicago

# Handling missing data
df.loc[3] = ['David', None, 'Boston']
print(df.fillna(0))              # Output:       Name   Age         City
                                 #          0  Alice  26.0     New York
                                 #          1    Bob  31.0  Los Angeles
                                 #          2 Charlie  36.0      Chicago
                                 #          3  David   0.0       Boston
```

These examples illustrate the powerful data manipulation and analysis capabilities provided by Numpy and Pandas, making them essential tools for data science and machine learning.